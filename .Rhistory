library(tidyverse)
library(rvest)
library(janitor)
library(stringr)
results <- c("sim_newsweek-us_1956-01-02_47_1",
"sim_newsweek-us_1956-01-09_47_2",
"sim_newsweek-us_1956-01-16_47_3",
"sim_newsweek-us_1956-01-23_47_4
", "sim_newsweek-us_1956-01-30_47_5
", "sim_newsweek-us_1956-02-06_47_6
", "sim_newsweek-us_1956-02-13_47_7
", "sim_newsweek-us_1956-02-20_47_8
", "sim_newsweek-us_1956-02-27_47_9
", "sim_newsweek-us_1956-03-05_47_10
", "sim_newsweek-us_1956-03-12_47_11
", "sim_newsweek-us_1956-03-19_47_12
", "sim_newsweek-us_1956-03-26_47_13
", "sim_newsweek-us_1956-04-02_47_14
", "sim_newsweek-us_1956-04-09_47_15
", "sim_newsweek-us_1956-04-16_47_16
", "sim_newsweek-us_1956-04-23_47_17
", "sim_newsweek-us_1956-04-30_47_18
", "sim_newsweek-us_1956-05-07_47_19
", "sim_newsweek-us_1956-05-14_47_20
", "sim_newsweek-us_1956-05-21_47_21
", "sim_newsweek-us_1956-05-28_47_22
", "sim_newsweek-us_1956-06-04_47_23
", "sim_newsweek-us_1956-06-11_47_24
", "sim_newsweek-us_1956-06-18_47_25
", "sim_newsweek-us_1956-06-25_47_26
", "sim_newsweek-us_1956-07-02_48_1
", "sim_newsweek-us_1956-07-09_48_2
", "sim_newsweek-us_1956-07-16_48_3
", "sim_newsweek-us_1956-07-23_48_4
", "sim_newsweek-us_1956-07-30_48_5
", "sim_newsweek-us_1956-08-06_48_6
", "sim_newsweek-us_1956-08-13_48_7
", "sim_newsweek-us_1956-08-20_48_8
", "sim_newsweek-us_1956-08-27_48_9
", "sim_newsweek-us_1956-09-03_48_10
", "sim_newsweek-us_1956-09-10_48_11
", "sim_newsweek-us_1956-09-17_48_12
", "sim_newsweek-us_1956-09-24_48_13
", "sim_newsweek-us_1956-10-01_48_14
", "sim_newsweek-us_1956-10-08_48_15
", "sim_newsweek-us_1956-10-15_48_16
", "sim_newsweek-us_1956-10-22_48_17
", "sim_newsweek-us_1956-10-29_48_18
", "sim_newsweek-us_1956-11-05_48_19
", "sim_newsweek-us_1956-11-12_48_20
", "sim_newsweek-us_1956-11-19_48_21
", "sim_newsweek-us_1956-11-26_48_22
", "sim_newsweek-us_1956-12-03_48_23
", "sim_newsweek-us_1956-12-10_48_24
", "sim_newsweek-us_1956-12-17_48_25
", "sim_newsweek-us_1956-12-24_48_26
", "sim_newsweek-us_1956-12-31_48_27")
# Provided list of issues
results <- c("sim_newsweek-us_1956-01-02_47_1",
"sim_newsweek-us_1956-01-09_47_2",
"sim_newsweek-us_1956-01-16_47_3",
"sim_newsweek-us_1956-01-23_47_4
", "sim_newsweek-us_1956-01-30_47_5
", "sim_newsweek-us_1956-02-06_47_6
", "sim_newsweek-us_1956-02-13_47_7
", "sim_newsweek-us_1956-02-20_47_8
", "sim_newsweek-us_1956-02-27_47_9
", "sim_newsweek-us_1956-03-05_47_10
", "sim_newsweek-us_1956-03-12_47_11
", "sim_newsweek-us_1956-03-19_47_12
", "sim_newsweek-us_1956-03-26_47_13
", "sim_newsweek-us_1956-04-02_47_14
", "sim_newsweek-us_1956-04-09_47_15
", "sim_newsweek-us_1956-04-16_47_16
", "sim_newsweek-us_1956-04-23_47_17
", "sim_newsweek-us_1956-04-30_47_18
", "sim_newsweek-us_1956-05-07_47_19
", "sim_newsweek-us_1956-05-14_47_20
", "sim_newsweek-us_1956-05-21_47_21
", "sim_newsweek-us_1956-05-28_47_22
", "sim_newsweek-us_1956-06-04_47_23
", "sim_newsweek-us_1956-06-11_47_24
", "sim_newsweek-us_1956-06-18_47_25
", "sim_newsweek-us_1956-06-25_47_26
", "sim_newsweek-us_1956-07-02_48_1
", "sim_newsweek-us_1956-07-09_48_2
", "sim_newsweek-us_1956-07-16_48_3
", "sim_newsweek-us_1956-07-23_48_4
", "sim_newsweek-us_1956-07-30_48_5
", "sim_newsweek-us_1956-08-06_48_6
", "sim_newsweek-us_1956-08-13_48_7
", "sim_newsweek-us_1956-08-20_48_8
", "sim_newsweek-us_1956-08-27_48_9
", "sim_newsweek-us_1956-09-03_48_10
", "sim_newsweek-us_1956-09-10_48_11
", "sim_newsweek-us_1956-09-17_48_12
", "sim_newsweek-us_1956-09-24_48_13
", "sim_newsweek-us_1956-10-01_48_14
", "sim_newsweek-us_1956-10-08_48_15
", "sim_newsweek-us_1956-10-15_48_16
", "sim_newsweek-us_1956-10-22_48_17
", "sim_newsweek-us_1956-10-29_48_18
", "sim_newsweek-us_1956-11-05_48_19
", "sim_newsweek-us_1956-11-12_48_20
", "sim_newsweek-us_1956-11-19_48_21
", "sim_newsweek-us_1956-11-26_48_22
", "sim_newsweek-us_1956-12-03_48_23
", "sim_newsweek-us_1956-12-10_48_24
", "sim_newsweek-us_1956-12-17_48_25
", "sim_newsweek-us_1956-12-24_48_26
", "sim_newsweek-us_1956-12-31_48_27")
# Create a function to generate a stratified sample
stratified_sample_generator <- function(issue_list) {
library(dplyr)
library(stringr)
# Convert issue_list to a data frame
issues_df <- data.frame(issue = issue_list, stringsAsFactors = FALSE)
# Extract year and month
issues_df <- issues_df %>%
mutate(date_part = str_extract(issue, "\\d{4}-\\d{2}"),
month = str_sub(date_part, 1, 7))
# Group by month and sample one issue per month
stratified_sample <- issues_df %>%
group_by(month) %>%
sample_n(1) %>%
pull(issue)
return(stratified_sample)
}
# Generate the stratified sample
sample <- stratified_sample_generator(results)
print(sample)
url2 <- "https://archive.org/download/sim_newsweek-us_1956-"
test  <- url2 %>%
read_html() %>%
html_table()
test  <- url2 %>%
read_html() %>%
html_table()
# Specify the base URL
base_url <- "https://archive.org/download/sim_newsweek-us_"
# Specify the dates of the issues you're interested in
dates <- c("1956-01-30_47_5", "1956-02-06_47_6")  # Add more dates as needed
# Generate the URLs
urls <- paste0(base_url, dates, "/sim_newsweek-us_", dates, ".pdf")
urls
devtools::install_github("hrbrmstr/wayback")
library(wayback)
library(tidyverse)
# current verison
packageVersion("wayback")
archive_available("https://archive.org/download/pub_newsweek-us/pub_newsweek-us_files.xml")
get_mementos("https://archive.org/download/pub_newsweek-us/pub_newsweek-us_files.xml")
newsweek_timemap <- get_timemap("https://archive.org/download/pub_newsweek-us/pub_newsweek-us_files.xml")
View(newsweek_timemap)
cdx_basic_query("https://archive.org/download/pub_newsweek-us/pub_newsweek-us_files.xml", limit = 10) %>%
glimpse()
reticulate::repl_python()
library(pdftools)
library(stringr)
library(fs)
# Specify the folder containing the PDF files
pdf_folder <- "/Users/robwells/Library/CloudStorage/Dropbox/Current_Projects/Moley project 2024/Newsweek_56"
# Get a list of all PDF files in the folder
pdf_files <- dir_ls(pdf_folder, glob = "*.pdf")
# Function to extract perspective page
extract_perspective <- function(pdf_path) {
tryCatch({
# Extract all text
text <- pdf_text(pdf_path)
# Find page with both "perspective" and "Moley"
page_num <- which(str_detect(text, regex("Perspective", ignore_case = FALSE)) &
str_detect(text, regex("Moley", ignore_case = FALSE))  |
str_detect(text, regex("by Raymond", ignore_case = FALSE)))
# Extract the specific page
if (length(page_num) > 0) {
output_file <- paste0("Moley_column_", basename(pdf_path))
pdf_subset(pdf_path, pages = page_num, output = output_file)
return(paste("Perspective page extracted successfully from", basename(pdf_path), "! Page number:", page_num))
} else {
return(paste("Perspective not found in", basename(pdf_path)))
}
}, error = function(e) {
return(paste("Error processing", basename(pdf_path), ":", e$message))
})
}
# Process each PDF file
results <- sapply(pdf_files, extract_perspective)
# Print results
for (result in results) {
cat(result, "\n")
}
reticulate::repl_python()
library(tidyverse)
library(rvest)
library(janitor)
library(stringr)
newsweek <- rio::import("newsweek_sample_size.xlsx", sheet=newsweek_index_48_68_results)
newsweek <- rio::import("newsweek_sample_size.xlsx", sheet="newsweek_index_48_68_results")
View(newsweek)
newsweek1962 <- newsweek %>%
filter(identifier =="1962")
newsweek1962 <- newsweek %>%
filter(str_detect(identifier, "1962"))
View(newsweek1962)
newsweek1960 <- newsweek %>%
filter(str_detect(identifier, "1960"))
View(newsweek1960)
results <- c(
"sim_newsweek-us_1952-01-07_39_1",
"sim_newsweek-us_1952-01-14_39_2",
"sim_newsweek-us_1952-01-21_39_3",
"sim_newsweek-us_1952-01-28_39_4",
"sim_newsweek-us_1952-02-04_39_5",
"sim_newsweek-us_1952-02-11_39_6",
"sim_newsweek-us_1952-02-18_39_7",
"sim_newsweek-us_1952-02-25_39_8",
"sim_newsweek-us_1952-03-03_39_9",
"sim_newsweek-us_1952-03-10_39_10",
"sim_newsweek-us_1952-03-17_39_11",
"sim_newsweek-us_1952-03-24_39_12",
"sim_newsweek-us_1952-03-31_39_13",
"sim_newsweek-us_1952-04-07_39_14",
"sim_newsweek-us_1952-04-14_39_15",
"sim_newsweek-us_1952-04-21_39_16",
"sim_newsweek-us_1952-04-28_39_17",
"sim_newsweek-us_1952-05-05_39_18",
"sim_newsweek-us_1952-05-12_39_19",
"sim_newsweek-us_1952-05-19_39_20",
"sim_newsweek-us_1952-05-26_39_21",
"sim_newsweek-us_1952-06-02_39_22",
"sim_newsweek-us_1952-06-09_39_23",
"sim_newsweek-us_1952-06-16_39_24",
"sim_newsweek-us_1952-06-23_39_25",
"sim_newsweek-us_1952-06-30_39_26",
"sim_newsweek-us_1952-07-07_40_1",
"sim_newsweek-us_1952-07-14_40_2",
"sim_newsweek-us_1952-07-21_40_3",
"sim_newsweek-us_1952-07-28_40_4",
"sim_newsweek-us_1952-08-04_40_5",
"sim_newsweek-us_1952-08-11_40_6",
"sim_newsweek-us_1952-08-18_40_7",
"sim_newsweek-us_1952-08-25_40_8",
"sim_newsweek-us_1952-09-01_40_9",
"sim_newsweek-us_1952-09-08_40_10",
"sim_newsweek-us_1952-09-15_40_11",
"sim_newsweek-us_1952-09-22_40_12",
"sim_newsweek-us_1952-09-29_40_13",
"sim_newsweek-us_1952-10-06_40_14",
"sim_newsweek-us_1952-10-13_40_15",
"sim_newsweek-us_1952-10-20_40_16",
"sim_newsweek-us_1952-10-27_40_17",
"sim_newsweek-us_1952-11-03_40_18",
"sim_newsweek-us_1952-11-10_40_19",
"sim_newsweek-us_1952-11-17_40_21",
"sim_newsweek-us_1952-11-24_40_22",
"sim_newsweek-us_1952-12-01_40_23",
"sim_newsweek-us_1952-12-08_40_24",
"sim_newsweek-us_1952-12-15_40_25",
"sim_newsweek-us_1952-12-22_40_26",
"sim_newsweek-us_1952-12-29_40_27"
)
View(newsweek1962)
View(newsweek1960)
newsweek1960 <- newsweek %>%
filter(str_detect(identifier, "1960")) %>%
as.character()
head(results)
head(newsweek1960)
newsweek1960_clean <- gsub("c\\(\"|\"\\)|\\n", "", newsweek1960)
newsweek1960_list <- unlist(strsplit(newsweek1960_clean, ", "))
head(newsweek1960_list)
newsweek1960_list <-gsub("c\\(\"|\"\\)|\\n", "", newsweek1960_list)
head(newsweek1960_list)
newsweek1960_list <- gsub("\\\"", "", newsweek1960_list)
head(newsweek1960_list)
results <- newsweek1960_list
# Create a function to generate a stratified sample
stratified_sample_generator <- function(issue_list) {
library(dplyr)
library(stringr)
# Convert issue_list to a data frame
issues_df <- data.frame(issue = issue_list, stringsAsFactors = FALSE)
# Extract year and month
issues_df <- issues_df %>%
mutate(date_part = str_extract(issue, "\\d{4}-\\d{2}"),
month = str_sub(date_part, 1, 7))
# Group by month and sample one issue per month
stratified_sample <- issues_df %>%
group_by(month) %>%
sample_n(1) %>%
pull(issue)
return(stratified_sample)
}
# Generate the stratified sample
sample <- stratified_sample_generator(results)
print(sample)
# Remove index and brackets using regular expression
cleaned_text <- gsub("^\\[\\d+\\]\\s*\"", "", sample)
# Split into individual strings
items <- unlist(strsplit(cleaned_text, "\n"))
# Print each item with a comma
for (item in items) {
cat(item, ",\n")
}
head(items)
head(sample)
reticulate::repl_python()
print(sample)
print(items)
# Remove index and brackets using regular expression
cleaned_text <- gsub("^\\[\\d+\\]\\s*\"", "", sample)
# Split into individual strings
items <- unlist(strsplit(cleaned_text, "\n"))
# Print each item with a comma
for (item in items) {
cat(item, ",\n")
}
print(items)
head(item)
head(cleaned_text)
cleaned_text
results
sample
print(items)
## Revised regular expression
cleaned_text <- gsub("^\\[\\d+\\]\\s*\"|\"$", "", sample)
# Split into individual strings
items <- unlist(strsplit(cleaned_text, "\n"))
# Print each item with a comma
for (item in items) {
if(item != ""){  # Check if the item is not empty to avoid extra commas
cat(item, ",\n")
}
}
print(items)
# Clean the text to include new lines and avoid potential issues
cleaned_text <- gsub("^\\[\\d+\\]\\s*\"|\"$", "", sample)
cleaned_text <- gsub("\n\\s+", "\n", cleaned_text)
# Split into individual strings (making sure we split on the correct line endings)
items <- unlist(strsplit(cleaned_text, "\\r?\\n"))
# Print each item with a comma
for (item in items) {
if(item != ""){  # Check if the item is not empty to avoid extra commas
cat(item, ",\n")
}
}
# Clean the text
cleaned_text <- gsub("^\\[\\d+\\]\\s*\"|\"$", "", sample)
cleaned_text <- gsub("\n\\s+", "\n", cleaned_text)
items <- unlist(strsplit(cleaned_text, "\\r?\\n"))
# Enclose each string in quotes and add a comma
formatted_items <- paste0("\"", items, "\",")
# Print each formatted item
for (item in formatted_items) {
cat(item, "\n")
}
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
