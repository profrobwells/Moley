library(googlesheets4)
googlesheets4::gs4_deauth()
index <- read_sheet("https://docs.google.com/spreadsheets/d/1GCvfNHgEN_TP1KA6YdpBf-Bp0YdwGOeG8x9uSzjHvGI/edit?usp=sharing")
index_cleaned <- index %>%
mutate(Text = str_split(Text, "(?<=\\d{1,2}: \\d{1,3})\\s+")) %>%
unnest(Text) |>
mutate(Text = str_squish(Text)) |>
mutate(Text = case_when( #specific junk in index cleaned. only for 1950s
str_detect(Text,
"After Little Rock\\?\\s*O\\s*7\\s*112") ~ "After Little Rock? O 7: 112",
str_detect(Text, "Laski: Politician, Educator. Mr 30: 100") ~ "Laski Politician, Educator. Mr 30: 100",
TRUE ~ Text))
# My strategy to deal with non-standardized errors: drop them into a separate dataframe and clean them separately, rejoin with the main df
index_messy <- index_cleaned %>%
mutate(
# Check for rows with multiple colons
colon_count = str_count(Text, ":")) %>%
unnest(Text) %>%
filter(colon_count > 1) |> # any column with 2 or more columns is kept
slice(-c(1,6)) #specific to this data, may cut for future
# process rows that still contain more than one colon
index_cleaned2 <- index_messy %>%
mutate(
# Check for rows with multiple colons
colon_count = str_count(Text, ":"),
# Further split only those rows that still have multiple colons
Text = if_else(
colon_count > 1,
# Split by the "Day: Page" pattern, but only if multiple entries are found
map(Text, ~ str_split(.x, "(?<=\\d{1,2}:\\d{1,3})\\s+")[[1]]),
list(Text) # Wrap single entries in a list for consistency
)
) %>%
unnest(Text) %>%
distinct() %>%
select(-colon_count)
# Split Entries: The regular expression (?<=\\d{1,2}: \\d{1,3})\\s+ captures points after each "Day: Page" format in Text and splits entries accordingly.
# Unnest Rows: After splitting, unnest(Text) expands each article entry into a new row.
index_cleaned2 <- index_cleaned2 %>%
mutate(Text = case_when( #specific string cleaning.
str_detect(Text,
"My 23: 56; Rept from England: part 2. My 30: 34; with Attlee; pic. Je 13: 17") ~ "Rept from England part 2. My 30: 34",
str_detect(Text, "BritainStaysRight.O19:56") ~ "BritainStaysRight. O 19: 56",
str_detect(Text, "Announcement of upcoming Byrd articles, Ag 5: 100; Ag 12: 100; Ag 19: 96; Ag") ~ "Announcement of upcoming Byrd articles, Ag 5: 100",
TRUE ~ Text))
index_cleaned3 <- index_cleaned %>%
mutate(
# Check for rows with multiple colons
colon_count = str_count(Text, ":")) %>%
unnest(Text) %>%
filter(colon_count == 1) |>
select(-colon_count)
index <- rbind(index_cleaned3, index_cleaned2)
#replace question marks for column splitting
index <- index |>
mutate(Text = str_replace_all(Text, "\\?", "."))
#split column on period
index1 <- separate(index, col = Text, into = c("column2", "column3"), sep = "\\.")
index <- separate(index1, col = column3, into = c("date", "page"), sep = "\\:")
library(stringr)
# Define the month abbreviation mapping
month_lookup <- c("Ja" = "01", "F" = "02", "Mr" = "03", "Ap" = "04",
"My" = "05", "Je" = "06", "Jl" = "07", "J1" = "07", "Ag" = "08",
"S" = "09", "O" = "10", "0" = "10", "N" = "11", "D" = "12", "J\\]" ="07")
index <- index %>%
mutate(
# Extract month abbreviation and replace using lookup
month = str_extract(date, "[A-Za-z]+"),
day = str_extract(date, "\\d+"),
month_num = month_lookup[month],
# Format `date2` as "YYYY-MM-DD_page"
date2 = sprintf("%s-%s-%02d", Year, month_num, as.integer(day))) |>
mutate(date2 = lubridate::ymd(date2)) |>
mutate(page = str_squish(page)) |>
mutate(real_page = as.numeric(page)) |>
mutate(real_page = (real_page + 1))
#write.csv(index, "./Newsweek_1953_55_57_59/newsweek_moley_53_55_57_59.csv")
View(index)
month_lookup <- c(
"Ja" = "01", "F" = "02", "Mr" = "03", "Ap" = "04", "My" = "05",
"Je" = "06", "Jl" = "07", "J1" = "07", "J\\]" = "07", "Ag" = "08",
"S" = "09", "O" = "10", "0" = "10", "N" = "11", "D" = "12"
)
index_cleaned <- index %>%
mutate(
# Extract month abbreviation, replacing edge cases using lookup
month = str_extract(date, "[A-Za-z]+"),
day = str_extract(date, "\\d+"),
month_num = month_lookup[month],  # Replace using month lookup
# Ensure day is numeric and set any invalid days to NA for consistency
day = ifelse(!is.na(day), as.integer(day), NA_integer_),
# Construct `date2` with cleaned year, month, and day values
date2 = ifelse(!is.na(month_num) & !is.na(day),
sprintf("%s-%s-%02d", Year, month_num, day),
NA_character_)
) %>%
# Convert `date2` to Date format
mutate(date2 = lubridate::ymd(date2)) %>%
# Clean and convert `page` column if present
mutate(real_page = as.numeric(str_squish(page)),
real_page = ifelse(!is.na(real_page), real_page + 1, NA_real_))
View(index_cleaned3)
View(index_cleaned)
# Define month lookup to handle all cases, including variants like "J1" and "J]"
month_lookup <- c(
"Ja" = "01", "F" = "02", "Mr" = "03", "Ap" = "04", "My" = "05",
"Je" = "06", "Jl" = "07", "J1" = "07", "J\\]" = "07", "Ag" = "08",
"S" = "09", "O" = "10", "0" = "10", "N" = "11", "D" = "12"
)
index_cleaned <- index %>%
mutate(
# Extract month abbreviation and day number
month = str_extract(date, "^[A-Za-z]+"),
day = str_extract(date, "\\d{1,2}"),
# Convert extracted month using lookup, handle NA for unmatched cases
month_num = month_lookup[month],
day = as.numeric(day),
# Construct the date field with formatted values
date2 = ifelse(!is.na(month_num) & !is.na(day),
sprintf("%s-%s-%02d", Year, month_num, day),
NA_character_)
) %>%
# Convert `date2` to Date type if the format is valid
mutate(date2 = lubridate::ymd(date2, quiet = TRUE)) %>%
# Clean `page` column, adjusting for cases with invalid/missing pages
mutate(
real_page = as.numeric(str_squish(page)),
real_page = ifelse(!is.na(real_page), real_page + 1, NA_real_)
)
View(index_cleaned)
# Define month lookup to handle all cases, including special cases like "J1" and "J]"
month_lookup <- c(
"Ja" = "01", "F" = "02", "Mr" = "03", "Ap" = "04", "My" = "05",
"Je" = "06", "Jl" = "07", "J1" = "07", "J\\]" = "07", "Ag" = "08",
"S" = "09", "O" = "10", "0" = "10", "N" = "11", "D" = "12"
)
index_cleaned <- index %>%
mutate(
# Extract month abbreviation and day
month = str_extract(date, "^[A-Za-z]+"),
day = str_extract(date, "\\d{1,2}"),
# Use month lookup, with error handling for unknown months
month_num = month_lookup[month],
# Create a valid date only if month and day are non-missing and valid
date2 = ifelse(
!is.na(month_num) & !is.na(day),
sprintf("%s-%s-%02d", Year, month_num, as.integer(day)),
NA_character_
)
) %>%
# Convert `date2` to Date type if the format is valid
mutate(date2 = ymd(date2, quiet = TRUE)) %>%
# Handle `page` values and increment them only if valid numeric values are detected
mutate(
page = str_squish(page),
real_page = as.numeric(page),
real_page = ifelse(!is.na(real_page), real_page + 1, NA_real_)
)
View(index_cleaned)
# Define month lookup to handle all cases, including variants like "J1" and "J]"
month_lookup <- c(
"Ja" = "01", "F" = "02", "Mr" = "03", "Ap" = "04", "My" = "05",
"Je" = "06", "Jl" = "07", "J1" = "07", "J\\]" = "07", "Ag" = "08",
"S" = "09", "O" = "10", "0" = "10", "N" = "11", "D" = "12"
)
index_cleaned <- index %>%
mutate(
# Extract month abbreviation, replacing edge cases using lookup
month = str_extract(date, "[A-Za-z]+"),
day = str_extract(date, "\\d+"),
month_num = month_lookup[month],  # Replace using month lookup
# Ensure day is numeric and set any invalid days to NA for consistency
day = ifelse(!is.na(day), as.integer(day), NA_integer_),
# Construct `date2` with cleaned year, month, and day values
date2 = ifelse(!is.na(month_num) & !is.na(day),
sprintf("%s-%s-%02d", Year, month_num, day),
NA_character_)
) %>%
# Convert `date2` to Date format
mutate(date2 = lubridate::ymd(date2)) %>%
# Clean and convert `page` column if present
mutate(real_page = as.numeric(str_squish(page)),
real_page = ifelse(!is.na(real_page), real_page + 1, NA_real_))
View(index_cleaned)
index5 <- index_cleaned |>
filter(date2 = is.na)
index5 <- index_cleaned |>
filter(date2 == is.na)
index5 <- index_cleaned |>
filter(is.na(date2))
View(index5)
index5 <- index_cleaned |>
filter(is.na(date2)) |>
mutate(month = case_when(
str_extract(date2, "J") ~ "07",
str_extract(date2, "0") ~ "10",
str_extract(date2, "O") ~ "10",
TRUE ~ date2))
index5 <- index_cleaned |>
filter(is.na(date2)) |>
mutate(month = case_when(
str_extract(date2, "J") ~ "07",
str_extract(date2, "0") ~ "10",
str_extract(date2, "O") ~ "10",
TRUE ~ month))
head(index5)
index5 <- index_cleaned |>
filter(is.na(date2)) |>
mutate(month = case_when(
str_extract(date, "J") ~ "07",
str_extract(date, "0") ~ "10",
str_extract(date, "O") ~ "10",
TRUE ~ month))
index5 <- index_cleaned |>
filter(is.na(date2)) |>
mutate(date = str_squish(date)) |>
mutate(month = case_when(
str_extract(date, "J") ~ "07",
str_extract(date, "0") ~ "10",
str_extract(date, "O") ~ "10",
TRUE ~ month))
index5 <- index_cleaned |>
filter(is.na(date2)) |>
mutate(date = str_squish(date)) |>
mutate(month = case_when(
str_extract(date, "\\J") ~ "07",
str_extract(date, "\\0") ~ "10",
str_extract(date, "\\O") ~ "10",
TRUE ~ month))
head(index5)
index5 <- index_cleaned |>
filter(is.na(date2)) |>
mutate(date = str_squish(date)) |>
mutate(month = case_when(
# Check if "J" is in the string (covering all instances like J, J1, Jl, etc.)
str_detect(date, "J") ~ "07",
# Handle other months explicitly
str_detect(date, "O") ~ "10",
str_detect(date, "0") ~ "10",
TRUE ~ month))
View(index5)
index5 <- index_cleaned |>
filter(is.na(date2)) |>
mutate(date = str_squish(date)) |>
mutate(month = case_when(
# Check if "J" is in the string (covering all instances like J, J1, Jl, etc.)
str_detect(date, "J") ~ "07",
# Handle other months explicitly
str_detect(date, "O") ~ "10",
str_detect(date, "0") ~ "10",
TRUE ~ month))
View(index5)
View(index_cleaned)
View(index5)
index5 <- index_cleaned |>
filter(is.na(date2)) |>
mutate(date = str_squish(date)) |>
mutate(month = case_when(
# Check if "J" is in the string (covering all instances like J, J1, Jl, etc.)
str_detect(date, "J") ~ "07",
# Handle other months explicitly
str_detect(date, "O") ~ "10",
str_detect(date, "0") ~ "10",
TRUE ~ month)) |>
separate(date, into = c("crap", "day1", "morecrap"), sep = " ")
View(index5)
index5 <- index_cleaned |>
filter(is.na(date2)) |>
mutate(date = str_squish(date)) |>
mutate(month = case_when(
# Check if "J" is in the string (covering all instances like J, J1, Jl, etc.)
str_detect(date, "J") ~ "07",
# Handle other months explicitly
str_detect(date, "O") ~ "10",
str_detect(date, "0") ~ "10",
TRUE ~ month))
index5 <- index_cleaned |>
filter(is.na(date2)) |>
mutate(date = str_squish(date)) |>
mutate(month = case_when(
# Check if "J" is in the string (covering all instances like J, J1, Jl, etc.)
str_detect(date, "J") ~ "07",
# Handle other months explicitly
str_detect(date, "O") ~ "10",
str_detect(date, "0") ~ "10",
TRUE ~ month)) |>
separate(date, into = c("crap", "day1", "morecrap"), sep = " ")
index5 <- index_cleaned |>
filter(is.na(date2)) |>
mutate(date = str_squish(date)) |>
mutate(month = case_when(
# Check if "J" is in the string (covering all instances like J, J1, Jl, etc.)
str_detect(date, "J") ~ "07",
# Handle other months explicitly
str_detect(date, "O") ~ "10",
str_detect(date, "0") ~ "10",
TRUE ~ month)) |>
separate(date, into = c("crap", "day"), sep = " ")
index_awful <- index5 |>
filter(month !="10" | month !="07")
View(index_awful)
index6 <- index5 %>%
filter(month %in% c("07", "10"))
View(index6)
index_awful <- index5 %>%
filter(!month %in% c("07", "10"))
View(index_awful)
write.csv(index_awful, "index_awful.csv")
glimpse(index_cleaned)
glimpse(index6)
index5 <- index_cleaned |>
filter(is.na(date2)) |>
mutate(date = str_squish(date)) |>
mutate(month = case_when(
# Check if "J" is in the string (covering all instances like J, J1, Jl, etc.)
str_detect(date, "J") ~ "07",
# Handle other months explicitly
str_detect(date, "O") ~ "10",
str_detect(date, "0") ~ "10",
TRUE ~ month)) |>
mutate(date1 = date) |>
separate(date1, into = c("crap", "day"), sep = " ")
glimpse(index5)
glimpse(index_cleaned)
index5 <- index_cleaned |>
filter(is.na(date2)) |>
mutate(date = str_squish(date)) |>
mutate(month_num = case_when(
# Check if "J" is in the string (covering all instances like J, J1, Jl, etc.)
str_detect(date, "J") ~ "07",
# Handle other months explicitly
str_detect(date, "O") ~ "10",
str_detect(date, "0") ~ "10",
TRUE ~ month)) |>
mutate(date1 = date) |>
separate(date1, into = c("crap", "day"), sep = " ") |>
select(-crap)
View(index5)
index5 <- index_cleaned |>
filter(is.na(date2)) |>
mutate(date = str_squish(date)) |>
mutate(month_num = case_when(
# Check if "J" is in the string (covering all instances like J, J1, Jl, etc.)
str_detect(date, "J") ~ "07",
# Handle other months explicitly
str_detect(date, "O") ~ "10",
str_detect(date, "0") ~ "10",
TRUE ~ month)) |>
mutate(date1 = date) |>
separate(date1, into = c("crap", "day"), sep = " ") |>
select(-crap) |>
mutate(day = ifelse(!is.na(day), as.integer(day), NA_integer_),
# Construct `date2` with cleaned year, month, and day values
date2 = ifelse(!is.na(month_num) & !is.na(day),
sprintf("%s-%s-%02d", Year, month_num, day),
NA_character_)
) %>%
# Convert `date2` to Date format
mutate(date2 = lubridate::ymd(date2)) %>%
# Clean and convert `page` column if present
mutate(real_page = as.numeric(str_squish(page)),
real_page = ifelse(!is.na(real_page), real_page + 1, NA_real_))
index5 <- index_cleaned |>
filter(is.na(date2)) |>
mutate(date = str_squish(date)) |>
mutate(month_num = case_when(
# Check if "J" is in the string (covering all instances like J, J1, Jl, etc.)
str_detect(date, "J") ~ "07",
# Handle other months explicitly
str_detect(date, "O") ~ "10",
str_detect(date, "0") ~ "10",
TRUE ~ month)) |>
mutate(page = case_when(
str_detect(page, "92; Irs") ~ "92",
str_detect(page, "124;") ~ "124",
TRUE ~ page)) |>
mutate(date1 = date) |>
separate(date1, into = c("crap", "day"), sep = " ") |>
select(-crap) |>
mutate(day = ifelse(!is.na(day), as.integer(day), NA_integer_),
# Construct `date2` with cleaned year, month, and day values
date2 = ifelse(!is.na(month_num) & !is.na(day),
sprintf("%s-%s-%02d", Year, month_num, day),
NA_character_)
) %>%
# Convert `date2` to Date format
mutate(date2 = lubridate::ymd(date2)) %>%
# Clean and convert `page` column if present
mutate(real_page = as.numeric(str_squish(page)),
real_page = ifelse(!is.na(real_page), real_page + 1, NA_real_))
index6 <- index5 %>%
filter(month %in% c("07", "10"))
#the fields with no dates whatsoever
index_awful <- index5 %>%
filter(!month %in% c("07", "10"))
# write.csv(index_awful, "index_awful.csv")
index6 <- index5 %>%
filter(month %in% c("07", "10"))
View(index6)
index5 <- index_cleaned |>
filter(is.na(date2)) |>
mutate(date = str_squish(date)) |>
mutate(month_num = case_when(
# Check if "J" is in the string (covering all instances like J, J1, Jl, etc.)
str_detect(date, "J") ~ "07",
# Handle other months explicitly
str_detect(date, "O") ~ "10",
str_detect(date, "0") ~ "10",
TRUE ~ month)) |>
mutate(page = case_when(
str_detect(page, "92; Irs") ~ "92",
str_detect(page, "124;") ~ "124",
TRUE ~ page)) |>
mutate(date1 = date) |>
separate(date1, into = c("crap", "day"), sep = " ") |>
select(-crap) |>
mutate(day = ifelse(!is.na(day), as.integer(day), NA_integer_),
# Construct `date2` with cleaned year, month, and day values
date2 = ifelse(!is.na(month_num) & !is.na(day),
sprintf("%s-%s-%02d", Year, month_num, day),
NA_character_)
) %>%
# Convert `date2` to Date format
mutate(date2 = lubridate::ymd(date2)) %>%
# Clean and convert `page` column if present
mutate(real_page = as.numeric(str_squish(page)),
real_page = ifelse(!is.na(real_page), real_page + 1, NA_real_))
index6 <- index5 %>%
filter(month_num %in% c("07", "10"))
#the fields with no dates whatsoever
index_awful <- index5 %>%
filter(!month_num %in% c("07", "10"))
View(index6)
write.csv(index_awful, "index_awful.csv")
View(index_cleaned2)
index_cleaned4 <- index_cleaned |>
filter(!is.na(date2))
View(index_cleaned4)
index_final <- rbind(index_cleaned4, index6)
View(index_final)
index1 <- index_final |>
inner_join(sample, by=c("date2")) |>
mutate(URL = paste0("https://archive.org/details/", list, "/","page","/n",real_page,"/","mode/2up"))
View(index1)
View(sample)
index1 <- index_final |>
inner_join(sample, by=c("date2")) |>
mutate(URL = paste0("https://archive.org/details/", list, "/","page","/n",real_page,"/","mode/2up")) |>
distinct()
# Initialize the Chromote browser
b <- Chromote$new()
urls <- index1$URL
# List of URLs to capture as images
# urls <- index1 |>
#   filter(month == "Jl") |>
#   select(URL) |>
#   as.character()
# Loop through each URL and save it as an image
for (i in seq_along(urls)) {
url <- urls[i]
filename <- paste0("perspective_1959_", i, ".png")
# Open a new session for each URL
session <- b$new_session()
# Navigate to the URL
session$Page$navigate(url)
session$Page$loadEventFired()  # Wait until the initial page load event fires
Sys.sleep(8)  # Wait an additional time for full content loading
# Set viewport size and device scale factor for higher resolution
session$Emulation$setDeviceMetricsOverride(
width = 180,         # Width approximating columns 2 and 3
height = 700,        # Height capturing the middle 50% of the page
deviceScaleFactor = 6,
mobile = FALSE
)
# Capture the page as a screenshot
screenshot_data <- session$Page$captureScreenshot()  # Get the screenshot binary data
writeBin(base64decode(screenshot_data$data), filename)  # Save binary data to an image file
# Load the saved image for further cropping
img <- image_read(filename)
# Get the image dimensions
img_width <- image_info(img)$width
img_height <- image_info(img)$height
# Calculate the regions to keep based on image dimensions
# Removing top 20%, preserving columns 2 and 3, and removing bottom 25%
# 1. Calculate the vertical crop:
# Top 20% removal
top_crop_height <- round(img_height * 0.2)
# Bottom 25% removal
bottom_crop_height <- round(img_height * 0.25)
# Define the new height by excluding top and bottom crop
new_height <- img_height - top_crop_height - bottom_crop_height
# 2. Calculate the horizontal crop to isolate columns 2 and 3:
# Assuming columns 2 and 3 are the central 33-66% of the image width
left_crop_width <- round(img_width * 0.37)
new_width <- round(img_width * 0.55)
# Apply cropping: remove top 20%, bottom 25%, and crop horizontally to columns 2 and 3
img_cropped <- image_crop(
img,
geometry = sprintf("%dx%d+%d+%d",
new_width,             # Width of columns 2 and 3
new_height,            # Height after top and bottom removal
left_crop_width,       # Offset from the left to start at column 2
top_crop_height)       # Offset from the top to skip 20%
)
# Save the final cropped image
image_write(img_cropped, filename)
cat(paste0("Downloaded and cropped screenshot: ", filename, "\n"))
# Close the session
session$close()
}
# Close the Chromote browser
b$close()
